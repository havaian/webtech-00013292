<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" type="text/css" href="/assets/css/style.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css" rel="stylesheet">
  <link rel="shortcut icon" href="./assets/img/favicon.png" type="image/x-icon">
  <title>WebTech || 00013292</title>
</head>

<body>
  <h1>Expense Tracker</h1>
  <div class="container">
    <div class="header">
      <img src="https://i.ibb.co/jfScDTC/budget.png" alt="Expense Tracker" />
      <div class="balance-container">
        <h2>Your Balance</h2>
        <h2 id="balance" class="balance">$0.00</h2>
      </div>
    </div>
    <div class="inc-exp-container">
      <div>
        <h4>Income</h4>
        <p id="money-plus" class="money plus">+$0.00</p>
      </div>
      <div>
        <h4>Expenses</h4>
        <p id="money-minus" class="money minus">-$0.00</p>
      </div>
    </div>
    <h3>History</h3>
    <ul id="list" class="list"></ul>
    <h3>Add new transaction</h3>
    <div id="form">
      <div class="form-control">
        <label for="text">Description</label>
        <input type="text" id="text" placeholder="Enter description..." />
      </div>
      <div class="form-control">
        <label for="amount">Amount <br />
          <small>(minus symbol for expense, plus symbol for income)</small></label>
        <input type="number" id="amount" placeholder="Enter amount..." />
      </div>
      <div class="form-control">
        <label for="category">Category <br /></label>
        <select id="category">
          <option selected hidden>Choose the category...</option>
          <% for (let x in expense_categories) { %>
          <option value="<%=x%>"><%= expense_categories[x] %></option>
          <% }; %>
        </select>
      </div>
      <div class="form-control">
        <label for="datetime">Date & time <br /></label>
        <input type="datetime-local" id="datetime" placeholder="Enter date & time..." />
      </div>
      <button class="btn">Add transaction</button>
    </div>
  </div>
</body>
<footer>This web application was created to fulfill Web Technology module‚Äôs requirements and does not represent an actual company or service</footer>
<script src="/assets/js/main.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"
  integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=" crossorigin="anonymous"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.2/jquery-confirm.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.2/jquery-confirm.min.js"></script>
<script>
  const balance = document.getElementById("balance");
  const moneyPlus = document.getElementById("money-plus");
  const moneyMinus = document.getElementById("money-minus");
  const list = document.getElementById("list");
  const form = document.getElementById("form");
  const text = document.getElementById("text");
  const amount = document.getElementById("amount");
  const category = document.getElementById("category");
  const datetime = document.getElementById("datetime");

  window.expenses = <%- JSON.stringify(expenses) %>;
  window.expense_categories = <%- JSON.stringify(expense_categories) %>;

  let transactions = window.expenses;
  let expense_categories = window.expense_categories;

  const callAlert = (color, title, alertMsg, command) => {
    $.confirm({
      type: color,
      title: title,
      theme: 'modern',
      draggable: false,
      typeAnimated: true,
      buttons: {
        close: function () {
          eval(command);
        }
      },
      content: alertMsg
    });
  }

  const confirmDeletion = (id) => {
    $.confirm({
      title: 'Confirm that you want to delete this todo:',
      content: `${expenses[id].text} - ${expenses[id].amount} - ${expenses[id].datetime}`,
      autoClose: 'confirm|5000',
      buttons: {
        confirm: {
          btnClass: 'btn-green',
          action: (confirmButton) => {
            $.alert('Deleted!');
            axios.post("http://localhost:5050/delete-expense/" + id)
              .then(res => {
                if (res.status === 200) {
                  callAlert("green", "Successfully deleted!",
                    "This expense record has been successfully deleted from the database",
                    "window.location.reload()");
                } else {
                  callAlert("red", "Unexpected error!",
                    "An unexpected error occured while deleting this expense record. Check the logs",
                    "window.location.reload()");
                }
              })
          }
        },
        cancel: {
          btnClass: 'btn-red',
          action: (cancelButton) => {
            callAlert("blue", "Cancel operation!", "You have cancelled the deletion of this expense record");
          }
        }
      }
    });
  }

  const generateID = () => {
    return Math.floor(Math.random() * 100000000);
  }

  const getUnfilledFields = () => {
    const fields = [{
        name: "text",
        type: "input"
      },
      {
        name: "amount",
        type: "input"
      },
      {
        name: "category",
        type: "select"
      },
      {
        name: "datetime",
        type: "input"
      }
    ];

    const unfilledFields = [];

    for (let x in fields) {
      const input = document.querySelector(`${fields[x].type}#${fields[x].name}`);
      if (input === null) {
        unfilledFields.push(fields[x].name);
      }
    }
    return unfilledFields;
  }

  const addTransaction = (e) => {
    e.preventDefault();
    const unfilled_fields = getUnfilledFields();
    const unfilled_fields_modified = unfilled_fields.map(item => `<br /><strong>${item}</strong>`);
    const unfilled_fields_joined = "<br />" + unfilled_fields_modified.join('');
    if (unfilled_fields.length <= 0 && unfilled_fields[0] != undefined) {
      callAlert("red", "Missing data for adding an expense record",
        "The following data field/s were left unfilled:\n" + unfilled_fields_joined, "");
    } else {
      const transaction = {
        text: text.value,
        amount: amount.value,
        category: category.value,
        datetime: datetime.value
      };
      axios.post("http://localhost:5050/add-expense", transaction)
        .then(res => {
          if (res.status === 200) {
            callAlert("green", "New expense record added!", "You have just added a new expense record",
              "window.location.reload()");
          }
        });
    }
  }

  const addTransactionDOM = (transaction, id) => {
    const sign = transaction.amount < 0 ? "-" : "+";
    const item = document.createElement("li");
    item.classList.add(sign === "+" ? "plus" : "minus");
    transaction.datetime = transaction.datetime.split('T').join(' ');
    item.innerHTML = `
      <small>
          ${expense_categories[transaction.category]}
      </small>
      <p>
          ${transaction.text}
      </p>
      <span>
          ${sign}${Math.abs(transaction.amount)}
      </span>
      <em>
        ${transaction.datetime}
      </em>
      <button class="delete-btn" onclick="removeTransaction('${id.toString()}')">
          <i class="fa fa-times"></i>
      </button>
    `;
    list.appendChild(item);
  }

  const updateValues = () => {
    const amounts = [];
    for (let i in transactions) {
      amounts.push(transactions[i].amount);
    }
    const total = amounts
      .reduce((accumulator, value) => (accumulator += value), 0)
      .toFixed(2);
    const income = amounts
      .filter((value) => value > 0)
      .reduce((accumulator, value) => (accumulator += value), 0)
      .toFixed(2);
    const expense = (
      amounts
      .filter((value) => value < 0)
      .reduce((accumulator, value) => (accumulator += value), 0) * -1
    ).toFixed(2);
    balance.innerText = `$${total}`;
    moneyPlus.innerText = `$${income}`;
    moneyMinus.innerText = `$${expense}`;
  }

  const removeTransaction = (id) => {
    confirmDeletion(id);
  }

  // Init
  const init = () => {
    list.innerHTML = "";
    if (Object.keys(transactions).length === 0) {
      $("#list").html(`
        <li>‚ùé No expenses to show! üôå</li>
      `)
    } else {
      for (let x in transactions) {
        const id = x;
        addTransactionDOM(transactions[x], id);
      }
    }
    updateValues();
  }

  init();

  document.querySelector(".btn").addEventListener("click", addTransaction);
</script>

</html>